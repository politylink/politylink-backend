
type Member{
	id: ID!
	name: String!
	firstName: String
	lastName: String
	nameHira: String
	firstNameHira: String
	lastNameHira: String
	current: Boolean!
	house: House!
	electedBy: [Election!]! @relation(name: "ELECTS", direction: "IN")
	submittedBills: [Bill!]! @relation(name: "SUBMITS", direction: "OUT")
	attendedDiets: [Diet!]! @relation(name: "ATTENDS_DIET", direction: "OUT")
	attendedMinutes: [Minutes!]! @relation(name: "ATTENDS_MINUTE", direction: "OUT")
	referUrl: [Url!] @relation(name: "REFERS_MEMBER", direction: "OUT")
	relatedTimeLine: [Timeline!] @relation(name: "RELATED_MEMBER", direction: "OUT")
}

enum House{
	SYUGIIN
	SANGIIN
}

enum ElectionType{
	CONSTITUENCY
	PROPORTIONAL
}

type Election{
	id: ID!
	electionType: ElectionType!
	district: String!
	prefecture: String
	datetime: DateTime!
	electedMembers: [Member!]! @relation(name: "ELECTS", direction: "OUT")
}

type Diet{
	id: ID!
	number: Int!
	name: String!
	startDate: DateTime
	endDate: DateTime
	bills: [Bill!]! @relation(name: "HAS_BILL", direction: "IN")
	minutes: [Minutes!]! @relation(name: "HAS_MINUTE", direction: "IN")
}

type Law{
	id: ID!
	ndlId: String
	eGovId: String
	eGovUrl: String
	lawTitle: String!
	lawNumber: String!
	discussedAt: [Minutes!]! @relation(name: "DISCUSSES_LAW", direction: "OUT")
	referencedBy: [Law!]! @relation(name: "REFERENCES", direction: "OUT")
	references: [Law!]! @relation(name: "REFERENCES", direction: "IN")
	amendedBy: [Bill!]! @relation(name: "AMENDS", direction: "OUT")
	referUrl: [Url!] @relation(name: "REFERS_LAW", direction: "OUT")
	relatedTimeLine: [Timeline!] @relation(name: "RELATED_LAW", direction: "OUT")
}

enum BillCategory{
	KAKUHOU
	SYUHOU
	SANHOU
}

enum BillType{
	NEW
	AMENDMENT
}

enum BillStatus{
	IN_REVIEW
	ACCEPTED
	WITHDRAWN
}

type Bill{
	id: ID!
	ndlId: String
	ndlUrl: String
	billTitle: String!
	billNumber: String!
	billCategory: BillCategory!
	billType: BillType!
	billStatus: BillStatus!
	submittedBy: [Member!]! @relation(name: "SUBMITS", direction: "IN")
	submittedTo: Diet!  @relation(name: "SUBMITS_TO", direction: "OUT")
	discussedAt: [Minutes!]! @relation(name: "DUSCUSSES_BILL", direction: "IN")
	ammends: [Law!]! @relation(name: "AMENDS", direction: "IN")
	syugiinUrl: String
	sangiinUrl: String
	overviewUrl: String
	essentialUrl: String
	comparisonUrl: String
	pullRequestUrl: String
	submitted: DateTime
	syugiinCommittee: DateTime
	syugiin: DateTime
	sangiinCommittee: DateTime
	sangiin: DateTime
	proclaimed: DateTime
	referUrl: [Url!] @relation(name: "REFERS_BILL", direction: "OUT")
	relatedTimeLine: [Timeline!] @relation(name: "RELATED_BILL", direction: "OUT")
}

type Committee{
	id: ID!
	name: String!
	members: [Member!]! @relation(name: "RELATE_MEMBERS", direction: "IN")
	minutes: [Minutes!]! @relation(name: "RELATE_MINUTES", direction: "IN")
}

type Minutes{
	id: ID!
	ndlId: String
	ndlUrl: String
	minutesNumber: String!
	start: DateTime
	end: DateTime
	committee: Committee @relation(name: "RELATE_MINUTES", direction: "OUT")
	participants: [Member!]! @relation(name: "RELATE_MEMBERS", direction: "IN")
	heldAt: Diet @relation(name: "HAS_MINUTE", direction: "OUT")
	topics: [String!]!
	discussedBills: [Bill!]! @relation(name: "DUSCUSSES_BILL", direction: "OUT")
	discussedLaws: [Law!]! @relation(name: "DUSCUSSES_LAW", direction: "OUT")
}

type Url {
	id: ID!
	url: String!
	text: String
	type: String
	domain: String
	accessedOn: DateTime
	referredBills: [Bill!] @relation(name: "REFERS_BILL", direction: "IN")
	referredLaws: [Bill!] @relation(name: "REFERS_LAW", direction: "IN")
	referredMembers: [Bill!] @relation(name: "REFERS_MEMBER", direction: "IN")
}

type Timeline {
	id: ID!
	content: String
	startedOn: DateTime
	relatingBills: [Bill!] @relation(name: "RELATED_BILL", direction: "IN")
	relatingLaws: [Law!] @relation(name: "RELATED_LAW", direction: "IN")
	relatingMembers: [Member!] @relation(name: "RELATED_MEMBER", direction: "IN")
}

type Query {
	totalMembers: Int! @cypher(
            statement: """
            MATCH (n:Member)
	    RETURN COUNT(n)
            """
            )
	allMembers: [Member!]!
	totalElections: Int! @cypher(
            statement: """
            MATCH (n:Election)
	    RETURN COUNT(n)
            """
            )
	allElections: [Election!]!
	totalDiets: Int! @cypher(
            statement: """
            MATCH (n:Diet)
	    RETURN COUNT(n)
            """
            )
	allDiets: [Diet!]!
	totalLaws: Int! @cypher(
            statement: """
            MATCH (n:Law)
	    RETURN COUNT(n)
            """
            )
	allLaws: [Law!]!
	totalBills: Int! @cypher(
            statement: """
            MATCH (n:Bill)
	    RETURN COUNT(n)
            """
            )
	allBills: [Bill!]!
	totalCommittees: Int! @cypher(
            statement: """
            MATCH (n:Comittee)
	    RETURN COUNT(n)
            """
            )
	allCommittees: [Committee!]!
	totalMinutes: Int! @cypher(
            statement: """
            MATCH (n:Minutes)
	    RETURN COUNT(n)
            """
            )
	allMinutes: [Minutes!]!
}
schema{
	query: Query
}
